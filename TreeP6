# 6. Dado un archivo con todos los Jedi, de los que se cuenta con: nombre, especie, año de nacimiento, 
# color de sable de luz, ranking (Jedi Master, Jedi Knight, Padawan) y maestro, los últimostres campos pueden 
# tener más de un valor. 
# Escribir las funciones necesarias para resolver las siguientes consignas:
# a. crear tres árboles de acceso a los datos: por nombre, ranking y especie;
# b. realizar un barrido inorden del árbol por nombre y ranking;
# c. realizar un barrido por nivel de los árboles por ranking y especie;
# d. mostrar toda la información de Yoda y Luke Skywalker;
# e. mostrar todos los Jedi con ranking “Jedi Master”;
# f. listar todos los Jedi que utilizaron sabe de luz color verde;
# g. listar todos los Jedi cuyos maestros están en el archivo;
# h. mostrar todos los Jedi de especie “Togruta” o “Cerean”;
# i. listar los Jedi que comienzan con la letra A y los que contienen un “-” en su nombre.
from typing import Any, Optional
from queue import Queue

jedis = [
    {
        "nombre": "Yoda",
        "especie": "Desconocida",
        "anio_nacimiento": -896,
        "sables": ["Verde"],
        "ranking": ["Jedi Master"],
        "maestros": ["N'Kata Del Gormo"]
    },
    {
        "nombre": "Luke Skywalker",
        "especie": "Humano",
        "anio_nacimiento": -19,
        "sables": ["Azul", "Verde"],
        "ranking": ["Jedi Knight", "Jedi Master"],
        "maestros": ["Obi-Wan Kenobi", "Yoda"]
    },
    {
        "nombre": "Obi-Wan Kenobi",
        "especie": "Humano",
        "anio_nacimiento": -57,
        "sables": ["Azul"],
        "ranking": ["Jedi Knight", "Jedi Master"],
        "maestros": ["Qui-Gon Jinn"]
    },
    {
        "nombre": "Anakin Skywalker",
        "especie": "Humano",
        "anio_nacimiento": -41,
        "sables": ["Azul"],
        "ranking": ["Padawan", "Jedi Knight"],
        "maestros": ["Obi-Wan Kenobi"]
    },
    {
        "nombre": "Qui-Gon Jinn",
        "especie": "Humano",
        "anio_nacimiento": -92,
        "sables": ["Verde"],
        "ranking": ["Jedi Master"],
        "maestros": ["Conde Dooku"]
    },
    {
        "nombre": "Mace Windu",
        "especie": "Humano",
        "anio_nacimiento": -72,
        "sables": ["Violeta"],
        "ranking": ["Jedi Master"],
        "maestros": ["Cyslin Myr"]
    },
    {
        "nombre": "Ahsoka Tano",
        "especie": "Togruta",
        "anio_nacimiento": -36,
        "sables": ["Verde", "Blanco"],
        "ranking": ["Padawan", "Jedi Knight"],
        "maestros": ["Anakin Skywalker"]
    },
    {
        "nombre": "Plo Koon",
        "especie": "Kel Dor",
        "anio_nacimiento": -382,
        "sables": ["Azul", "Naranja"],
        "ranking": ["Jedi Master"],
        "maestros": ["Tyvokka"]
    },
    {
        "nombre": "Ki-Adi-Mundi",
        "especie": "Cerean",
        "anio_nacimiento": -92,
        "sables": ["Azul"],
        "ranking": ["Jedi Master"],
        "maestros": ["Yoda"]
    },
    {
        "nombre": "Shaak Ti",
        "especie": "Togruta",
        "anio_nacimiento": -59,
        "sables": ["Azul"],
        "ranking": ["Jedi Master"],
        "maestros": []
    }
]


class BinaryTree:

    class Node:
        def __init__(self, value, other_values: Optional[Any] = None):
            self.value = value
            self.left = None
            self.right = None
            self.other_values = other_values

    def __init__(self):
        self.root = None    

    def insert(self, value, other_values: Optional[Any] = None):
        def __insert (root, value, other_values):
            if root is None:
                return BinaryTree.Node(value, other_values) 
            elif value < root.value:
                root.left = __insert(root.left, value, other_values) 
            else:
                root.right = __insert(root.right, value, other_values) 
            return root
    
        self.root = __insert(self.root, value, other_values)

    def pre_order(self): #IMPRIME NODO COMPLETO
        def __pre_order(root):
            if root is not None:
                print(root.value, root.other_values)
                __pre_order(root.left)
                __pre_order(root.right)
        if self.root is not None:
            __pre_order(self.root)

    def pre_orderr(self): #IMPRIME SOLO EL VALOR POR EL CUAL SE ORGANIZO 
        def __pre_order(root):
            if root is not None:
                print(root.value)
                __pre_order(root.left)
                __pre_order(root.right)
        if self.root is not None:
            __pre_order(self.root)
    #B
    def in_order(self):  # Inorden (izquierda, raíz, derecha) → D, B, E, A, C
        def __in_order(root):
            if root is not None:
                __in_order(root.left)
                print(root.value)
                __in_order(root.right)
        if self.root is not None:
            __in_order(self.root)
    
    #C
    def by_level(self):  # Recorrido por niveles (BFS)
        tree_queue = Queue()
        if self.root is not None:
            tree_queue.put(self.root)  # put() en vez de arrive()

            while tree_queue.qsize() > 0:  # qsize() en vez de size()
                node = tree_queue.get()    # get() en vez de attention()
                print(node.value)
                if node.left is not None:
                    tree_queue.put(node.left)
                if node.right is not None:
                    tree_queue.put(node.right)
    
    #D
    def search(self, value: Any): #Devuelve el nodo completo
        def __search(root, value):
            if root is not None:
                if root.value == value:
                    return root
                elif root.value > value:
                    return __search(root.left, value)
                else:
                    return __search(root.right, value)
        aux = None
        if self.root is not None:
            aux = __search(self.root, value)
        return aux
    
    # E 
    def mostrar_jedi_master(self):
        def __in_order(root):
            if root is not None:
                __in_order(root.left)
                if root.value == "Jedi Master":
                    print(root.other_values)
                __in_order(root.right)
        if self.root is not None:
            __in_order(self.root)

    #F
    def listar_jedi_sable_verde(self):
        def __in_order(root):
            if root is not None:
                __in_order(root.left)
                if "Verde" in root.other_values["sables"]:
                    print(root.other_values)
                __in_order(root.right)
        if self.root is not None:
            __in_order(self.root)

    #G
    def listar_jedi_con_maestro_en_archivo(self):
        def __in_order(root):
            if root is not None:
                __in_order(root.left)
                if root.other_values["maestros"] != []:
                    print(root.other_values)
                __in_order(root.right)
        if self.root is not None:
            __in_order(self.root)

    #H
    def listar_jedi_especie_togruta_cerean(self):
        def __in_order(root):
            if root is not None:
                __in_order(root.left)
                if root.other_values["especie"] == "Togruta" or root.other_values["especie"] == "Cerean":
                    print(root.other_values)
                __in_order(root.right)
        if self.root is not None:
            __in_order(self.root)

    #I
    def proximity_search(self, value: Any): #Imprime los nodos que comienzan con el valor dado, no el nodo en si
        def __search(root, value):
            if root is not None:
                if root.value.startswith(value) or ("-" in root.value):
                    print(root.value)
                __search(root.left, value)
                __search(root.right, value)

        aux = None
        if self.root is not None:
            aux = __search(self.root, value)
        return aux 
   
    
    

#A
#-----------------------------------------------------------
arbol_nombre = BinaryTree()
for jedi in jedis:
    arbol_nombre.insert(jedi["nombre"], jedi)

arbol_ranking = BinaryTree()
for jedi in jedis:
    for rank in jedi["ranking"]:
        arbol_ranking.insert(rank, jedi)

arbol_especie = BinaryTree()
for jedi in jedis:
    arbol_especie.insert(jedi["especie"], jedi)


#B
arbol_nombre.in_order()
arbol_ranking.in_order()
#-----------------------------------------------------------


#C
arbol_ranking.by_level()
arbol_especie.by_level()
#-----------------------------------------------------------


#D
#-----------------------------------------------------------
yoda = arbol_nombre.search("Yoda")
print(yoda.other_values)
luke = arbol_nombre.search("Luke Skywalker")
print(luke.other_values)


#E
#-----------------------------------------------------------
arbol_ranking.mostrar_jedi_master()


#F
#-----------------------------------------------------------
arbol_nombre.listar_jedi_sable_verde()


#G
#-----------------------------------------------------------
arbol_nombre.listar_jedi_con_maestro_en_archivo()


#H
#-----------------------------------------------------------
arbol_nombre.listar_jedi_especie_togruta_cerean()


#I
#-----------------------------------------------------------
arbol_nombre.proximity_search("A" or "-")


