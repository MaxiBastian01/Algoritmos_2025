# 23. Implementar un algoritmo que permita generar un árbol con los datos de la siguiente tabla y
# resuelva las siguientes consultas:
# a. listado inorden de las criaturas y quienes la derrotaron;
# b. se debe permitir cargar una breve descripción sobre cada criatura;
# c. mostrar toda la información de la criatura Talos;
# d. determinar los 3 héroes o dioses que derrotaron mayor cantidad de criaturas;
# e. listar las criaturas derrotadas por Heracles;
# f. listar las criaturas que no han sido derrotadas;
# g. además cada nodo debe tener un campo “capturada” que almacenará el nombre del héroeo dios que la capturo;
# h. modifique los nodos de las criaturas Cerbero, Toro de Creta, Cierva Cerinea y Jabalí de Erimanto indicando que Heracles las atrapó;
# i. se debe permitir búsquedas por coincidencia;
# j. eliminar al Basilisco y a las Sirenas;
# k. modificar el nodo que contiene a las Aves del Estínfalo, agregando que Heracles derroto a varias;
# l. modifique el nombre de la criatura Ladón por Dragón Ladón;
# m. realizar un listado por nivel del árbol;
# n. muestre las criaturas capturadas por Heracles.

from queue import Queue



criaturas = [
    {"nombre": "Ceto", "derrotado_por": None},
    {"nombre": "Tifón", "derrotado_por": "Zeus"},
    {"nombre": "Equidna", "derrotado_por": "Argos Panoptes"},
    {"nombre": "Dino", "derrotado_por": None},
    {"nombre": "Pefredo", "derrotado_por": None},
    {"nombre": "Enio", "derrotado_por": "Gerión"},
    {"nombre": "Escila", "derrotado_por": "Cloto"},
    {"nombre": "Caribdis", "derrotado_por": "Láquesis"},
    {"nombre": "Euríale", "derrotado_por": "Átropos"},
    {"nombre": "Esteno", "derrotado_por": None},
    {"nombre": "Medusa", "derrotado_por": "Perseo"},
    {"nombre": "Ladón", "derrotado_por": "Heracles"},
    {"nombre": "Águila del Cáucaso", "derrotado_por": None},
    {"nombre": "Quimera", "derrotado_por": "Belerofonte"},
    {"nombre": "Hidra de Lerna", "derrotado_por": "Heracles"},
    {"nombre": "León de Nemea", "derrotado_por": "Heracles"},
    {"nombre": "Esfinge", "derrotado_por": "Edipo"},
    {"nombre": "Dragón de la Cólquida", "derrotado_por": None},
    {"nombre": "Cerbero", "derrotado_por": None},
    {"nombre": "Cerda de Cromión", "derrotado_por": "Teseo"},
    {"nombre": "Ortros", "derrotado_por": "Heracles"},
    {"nombre": "Toro de Creta", "derrotado_por": "Teseo"},
    {"nombre": "Jabalí de Calidón", "derrotado_por": "Atalanta"},
    {"nombre": "Carcinos", "derrotado_por": None},
    {"nombre": "Gerión", "derrotado_por": "Heracles"},
    {"nombre": "Cloto", "derrotado_por": None},
    {"nombre": "Láquesis", "derrotado_por": None},
    {"nombre": "Átropos", "derrotado_por": None},
    {"nombre": "Minotauro de Creta", "derrotado_por": "Teseo"},
    {"nombre": "Harpías", "derrotado_por": None},
    {"nombre": "Argos Panoptes", "derrotado_por": "Hermes"},
    {"nombre": "Aves del Estínfalo", "derrotado_por": "Heracles"},
    {"nombre": "Talos", "derrotado_por": "Medea"},
    {"nombre": "Sirenas", "derrotado_por": None},
    {"nombre": "Pitón", "derrotado_por": "Apolo"},
    {"nombre": "Cierva de Cerinea", "derrotado_por": None},
    {"nombre": "Basilisco", "derrotado_por": None},
    {"nombre": "Jabalí de Erimanto", "derrotado_por": None}
]


class BinaryTree():
    class Node():
        def __init__(self, nombre, derrotada_por, description=""):
            self.nombre = nombre
            self.derrotada_por = derrotada_por
            self.description = ""
            self.capturada = None 
            self.left = None
            self.right = None

    def __init__(self):
        self.root = None

    def insert(self, nombre, derrotado_por):
        def __insert(node, nombre, derrotado_por):
            if node is None:
                return BinaryTree.Node(nombre, derrotado_por)
            elif nombre < node.nombre:
                node.left = __insert(node.left, nombre, derrotado_por)
            else:
                node.right = __insert(node.right, nombre, derrotado_por)
            return node
        self.root = __insert(self.root, nombre, derrotado_por)

    def in_order(self):
        def __in_order(node):
            if node is not None:
                __in_order(node.left)
                print(f"{node.nombre}, derrotada por: {node.derrotada_por}")
                __in_order(node.right)
        if self.root is not None:
            __in_order(self.root)

    # B
    def cargar_descripcion(self, nombre, description):
        def __cargar_descripcion(node, nombre, description):
            if node is not None:
                if node.nombre == nombre:
                    node.description = description
                elif nombre < node.nombre:
                    __cargar_descripcion(node.left, nombre, description)
                else:
                    __cargar_descripcion(node.right, nombre, description)
        if self.root is not None:
            __cargar_descripcion(self.root, nombre, description)

    # C
    def mostrar_informacion(self, nombre):
        def __mostrar_informacion(node, nombre):
            if node is not None:
                if node.nombre == nombre:
                    print(f"Nombre: {node.nombre}")
                    print(f"Derrotada por: {node.derrotada_por}")
                    print(f"Descripción: {node.description}")
                elif nombre < node.nombre:
                    __mostrar_informacion(node.left, nombre)
                else:
                    __mostrar_informacion(node.right, nombre)
        if self.root is not None:
            __mostrar_informacion(self.root, nombre)

    # D
    def contar_derrotas(self):
        conteo = {}

        def __recorrer(node):
            if node is not None:
                if node.derrotada_por is not None:
                    if node.derrotada_por in conteo:
                        conteo[node.derrotada_por] += 1
                    else:
                        conteo[node.derrotada_por] = 1
                __recorrer(node.left)
                __recorrer(node.right)

        __recorrer(self.root)
        #sorter ordenar elementos de una lista (o cualquier iterable) y devuelve una nueva lista ordenada, sin modificar la original
        #la x: puede llamarse de cualquier otra forma es donde se guarda el parametro sorted(lista, key=lambda elem: elem[1]) elem[1] es el elemento a seleccioanr par aordenar 
        top_3 = sorted(conteo.items(), key=lambda x: x[1], reverse=True)[:3] 
        return top_3
    

    #F
    def criaturas_no_derrotadas(self):
        def __in_order(node):
            if node is not None:
                # primero recorremos el hijo izquierdo
                __in_order(node.left)
                # luego revisamos el nodo actual
                if node.derrotada_por is None:
                    print(f"{node.nombre}, derrotada por: {node.derrotada_por}")
                # finalmente recorremos el hijo derecho
                __in_order(node.right)
        
        if self.root is not None:
            __in_order(self.root)

    #G y H
    def asignar_captura(self, nombre, heroe):
        def __asignar(node, nombre, heroe):
            if node is not None:
                if node.nombre == nombre:
                    node.capturada = heroe
                elif nombre < node.nombre:
                    __asignar(node.left, nombre, heroe)
                else:
                    __asignar(node.right, nombre, heroe)
        if self.root is not None:
            __asignar(self.root, nombre, heroe)

    #I 
    def proximity_search(self, nombre): #Imprime los nodos que comienzan con el valor dado, no el nodo en si
        def __search(root, nombre):
            if root is not None:
                if root.nombre.startswith(nombre):
                    print(root.nombre)
                __search(root.left, nombre)
                __search(root.right, nombre)

        aux = None
        if self.root is not None:
            aux = __search(self.root, nombre)
        return aux 
    
    # J - eliminar un nodo
    def eliminar_criatura(self, nombre):
        def __delete(node, nombre):
            # Si llegamos a un nodo vacío, no hay nada que borrar
            if node is None:
                return None

            # Si el nombre a borrar es menor que el nodo actual, vamos al hijo izquierdo
            if nombre < node.nombre:
                node.left = __delete(node.left, nombre)

            # Si el nombre a borrar es mayor, vamos al hijo derecho
            elif nombre > node.nombre:
                node.right = __delete(node.right, nombre)

            # Si encontramos el nodo a borrar
            else:
                # Caso 1: nodo sin hijos o con un solo hijo
                if node.left is None:
                    return node.right  # reemplaza el nodo por su hijo derecho (o None)
                elif node.right is None:
                    return node.left  # reemplaza el nodo por su hijo izquierdo

                # Caso 2: nodo con dos hijos
                # Se busca el mayor de los menores (predecesor) o menor de los mayores (sucesor)
                # Aquí usamos el sucesor (el nodo más pequeño del subárbol derecho)
                succ = node.right
                while succ.left is not None:
                    succ = succ.left

                # Reemplazamos los datos del nodo actual con los del sucesor
                node.nombre = succ.nombre
                node.derrotada_por = succ.derrotada_por
                node.description = succ.description
                node.capturada = succ.capturada

                # Eliminamos el sucesor original del subárbol derecho
                node.right = __delete(node.right, succ.nombre)

            return node

        # Se llama la función recursiva desde la raíz
        if self.root is not None:
            self.root = __delete(self.root, nombre)

    #L
    def change_name(self, nombre_actual, nuevo_nombre):
        def __search_and_change(node):
            if node is not None:

                if node.nombre == nombre_actual:
                    node.nombre = nuevo_nombre
                
                __search_and_change(node.left)
                __search_and_change(node.right)

        if self.root is not None:
            __search_and_change(self.root)
    #M
    def by_level(self):  
        tree_queue = Queue()
        if self.root is not None:
            tree_queue.put(self.root)  # put() en vez de arrive, es mas comodo usar directamente la de python

            while tree_queue.qsize() > 0:  # qsize() en vez de size
                node = tree_queue.get()    # get() en vez de attention
                print(node.nombre)
                if node.left is not None:
                    tree_queue.put(node.left)
                if node.right is not None:
                    tree_queue.put(node.right)

    #N
    def in_order_heracles(self):
        def __in_order(node):
            if node is not None:
                __in_order(node.left)
                if node.derrotada_por == "Heracles":
                    print(node.nombre)
                __in_order(node.right)
        if self.root is not None:
            __in_order(self.root)



arbolCriaturas = BinaryTree()

for criatura in criaturas:
    arbolCriaturas.insert(criatura["nombre"], criatura["derrotado_por"])


# A
print("\nA. Listado inorden de las criaturas y quienes la derrotaron:")
arbolCriaturas.in_order()

# B
print("\nB. Cargar una breve descripción sobre cada criatura:")
# region Cargar descripciones
arbolCriaturas.cargar_descripcion(
    "Ceto", "Diosa marina primigenia, madre de monstruos marinos.")
arbolCriaturas.cargar_descripcion(
    "Tifón", "Gigante monstruoso que desafió a Zeus y fue vencido por él.")
arbolCriaturas.cargar_descripcion(
    "Equidna", "Ser mitad mujer mitad serpiente, madre de muchos monstruos.")
arbolCriaturas.cargar_descripcion(
    "Dino", "Una de las Grayas, hermanas con un solo ojo y un solo diente.")
arbolCriaturas.cargar_descripcion(
    "Pefredo", "Otra de las Grayas, compartía el ojo y el diente entre sus hermanas.")
arbolCriaturas.cargar_descripcion(
    "Enio", "Diosa de la guerra y el terror, compañera de Ares.")
arbolCriaturas.cargar_descripcion(
    "Escila", "Monstruo marino con seis cabezas que devoraba marineros.")
arbolCriaturas.cargar_descripcion(
    "Caribdis", "Monstruo que tragaba grandes cantidades de agua formando remolinos.")
arbolCriaturas.cargar_descripcion(
    "Euríale", "Una de las tres Gorgonas, hermana de Medusa y Esteno.")
arbolCriaturas.cargar_descripcion(
    "Esteno", "Gorgona inmortal, hermana de Medusa.")
arbolCriaturas.cargar_descripcion(
    "Medusa", "Única Gorgona mortal, convertía en piedra a quien la miraba.")
arbolCriaturas.cargar_descripcion(
    "Ladón", "Dragón que custodiaba las manzanas doradas del jardín de las Hespérides.")
arbolCriaturas.cargar_descripcion(
    "Águila del Cáucaso", "Ave enviada por Zeus para devorar el hígado de Prometeo.")
arbolCriaturas.cargar_descripcion(
    "Quimera", "Criatura con cuerpo de león, cabeza de cabra y cola de serpiente.")
arbolCriaturas.cargar_descripcion(
    "Hidra de Lerna", "Serpiente de múltiples cabezas, una inmortal, muerta por Heracles.")
arbolCriaturas.cargar_descripcion(
    "León de Nemea", "León invulnerable derrotado por Heracles en su primer trabajo.")
arbolCriaturas.cargar_descripcion(
    "Esfinge", "Criatura con cuerpo de león y rostro de mujer, derrotada por Edipo.")
arbolCriaturas.cargar_descripcion(
    "Dragón de la Cólquida", "Guardia del vellocino de oro en la Cólquida.")
arbolCriaturas.cargar_descripcion(
    "Cerbero", "Perro de tres cabezas que custodiaba las puertas del inframundo.")
arbolCriaturas.cargar_descripcion(
    "Cerda de Cromión", "Monstruosa cerda que devastaba la región de Cromión.")
arbolCriaturas.cargar_descripcion(
    "Ortros", "Perro bicéfalo, hermano de Cerbero, guardián de los rebaños de Gerión.")
arbolCriaturas.cargar_descripcion(
    "Toro de Creta", "Toro salvaje enviado por Poseidón, capturado por Teseo.")
arbolCriaturas.cargar_descripcion(
    "Jabalí de Calidón", "Jabalí gigante enviado por Artemisa, abatido por Atalanta.")
arbolCriaturas.cargar_descripcion(
    "Carcinos", "Cangrejo gigante aliado de la Hidra, aplastado por Heracles.")
arbolCriaturas.cargar_descripcion(
    "Gerión", "Gigante de tres cuerpos derrotado por Heracles en sus trabajos.")
arbolCriaturas.cargar_descripcion(
    "Cloto", "Una de las Moiras, hilaba el hilo de la vida.")
arbolCriaturas.cargar_descripcion(
    "Láquesis", "Moiras encargada de medir la longitud del hilo de la vida.")
arbolCriaturas.cargar_descripcion(
    "Átropos", "Moiras que cortaba el hilo de la vida, determinando la muerte.")
arbolCriaturas.cargar_descripcion(
    "Minotauro de Creta", "Criatura con cuerpo humano y cabeza de toro, encerrado en el laberinto.")
arbolCriaturas.cargar_descripcion(
    "Harpías", "Espíritus alados que robaban comida y castigaban a los culpables.")
arbolCriaturas.cargar_descripcion(
    "Argos Panoptes", "Gigante de cien ojos, vigilante incansable, muerto por Hermes.")
arbolCriaturas.cargar_descripcion(
    "Aves del Estínfalo", "Aves con plumas metálicas que atacaban a los hombres, abatidas por Heracles.")
arbolCriaturas.cargar_descripcion(
    "Talos", "Gigante de bronce que protegía Creta, derrotado por Medea.")
arbolCriaturas.cargar_descripcion(
    "Sirenas", "Criaturas marinas que atraían a los marineros con su canto.")
arbolCriaturas.cargar_descripcion(
    "Pitón", "Serpiente gigante del santuario de Delfos, muerta por Apolo.")
arbolCriaturas.cargar_descripcion(
    "Cierva de Cerinea", "Cierva sagrada de Artemisa, capturada viva por Heracles.")
arbolCriaturas.cargar_descripcion(
    "Basilisco", "Serpiente o gallo mítico cuya mirada causaba la muerte.")
arbolCriaturas.cargar_descripcion(
    "Jabalí de Erimanto", "Fiera capturada viva por Heracles en sus trabajos.")
# endregion

# C
print("\nC. Mostrar toda la información de la criatura Talos:")
arbolCriaturas.mostrar_informacion("Talos")

# D
print("\nD. Determinar los 3 héroes o dioses que derrotaron mayor cantidad de criaturas:")
derrotadas = arbolCriaturas.contar_derrotas()
print(derrotadas)

#F
print("\nF. listar las criaturas que no han sido derrotadas;")
arbolCriaturas.criaturas_no_derrotadas()

#G y H
arbolCriaturas.asignar_captura("Cerbero", "Heracles")
arbolCriaturas.asignar_captura("Toro de Creta", "Heracles")
arbolCriaturas.asignar_captura("Cierva de Cerinea", "Heracles")
arbolCriaturas.asignar_captura("Jabalí de Erimanto", "Heracles")

#I
print("\n # l. modifique el nombre de la criatura Ladón por Dragón Ladón;")
arbolCriaturas.proximity_search("Jabal")

#J
arbolCriaturas.eliminar_criatura("Basilisco")
arbolCriaturas.eliminar_criatura("Sirenas")
print("\nLista después de eliminar Basilisco y Sirenas:")
arbolCriaturas.in_order()

#k
arbolCriaturas.cargar_descripcion("Aves del Estínfalo","Aves con plumas metálicas que atacaban a los hombres, abatidas por Heracles en varias ocasiones.")

#L
print("\n # l. modifique el nombre de la criatura Ladón por Dragón Ladón")
arbolCriaturas.change_name("Ladón", "Dragón Ladón")
arbolCriaturas.in_order()

#M
print("\n M. realizar un listado por nivel del árbol;")
arbolCriaturas.by_level()

#N
print("\n # N. muestre las criaturas capturadas por Heracles.")
arbolCriaturas.in_order_heracles()
