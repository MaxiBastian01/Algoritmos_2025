#Dada una cola con las notificaciones de las aplicaciones de redes sociales de un Smartphone, de las cual se cuenta con la hora de la notificación, 
#la aplicación que la emitió y el mensaje, resolver las siguientes actividades:
#a. escribir una función que elimine de la cola todas las notificaciones de Facebook;
#b. escribir una función que muestre todas las notificaciones de Twitter, cuyo mensaje incluya la palabra ‘Python’, si perder datos en la cola;
#c. utilizar una pila para almacenar temporáneamente las notificaciones producidas entre las 11:43 y las 15:57, y determinar cuántas son.

notificaciones_data = [
    {"hora": "08:15", "app": "Facebook", "mensaje": "Tienes 3 nuevos recuerdos"},
    {"hora": "10:30", "app": "Facebook", "mensaje": "Nueva publicación de tu amigo"},
    {"hora": "11:45", "app": "Twitter", "mensaje": "Curso gratis de Python disponible"},
    {"hora": "13:20", "app": "Twitter", "mensaje": "Conferencia de tecnología en vivo"},
    {"hora": "14:00", "app": "Twitter", "mensaje": "Tips de Python para principiantes"},
    {"hora": "09:00", "app": "Instagram", "mensaje": "Nuevo mensaje de Juan"},
    {"hora": "12:10", "app": "TikTok", "mensaje": "Tendencia: música de los 90"},
    {"hora": "11:45", "app": "Twitter", "mensaje": "Curso gratis de Python disponible"},
    {"hora": "13:20", "app": "Twitter", "mensaje": "Conferencia de tecnología en vivo"},
    {"hora": "14:00", "app": "Twitter", "mensaje": "Tips de Python para principiantes"},
    {"hora": "15:57", "app": "YouTube", "mensaje": "Nuevo video de tu canal favorito"},
    {"hora": "08:00", "app": "WhatsApp", "mensaje": "Tienes un nuevo mensaje"},
    {"hora": "16:10", "app": "Instagram", "mensaje": "Publicación nueva de María"},
]
class Queue():
    def __init__(self):
        self.__element = []

    def attention(self):
        if self.__element:
            return self.__element.pop(0)
        else:
            return None
    
    def size(self):
        return len(self.__element)
    
    def arrive(self, value):
        self.__element.append(value)

    def on_front(self):
        if self.__element:
            return self.__element[0]
        else:
            return None

    def show(self):
        for item in self.__element:
            print(f"{item.hora} - {item.app}: {item.mensaje}")

    #A 
    def facebook_Delete(self):
        aux = []
        while self.size() > 0:
            notif = self.attention()
            if notif.app == "Facebook":
                print(f"{notif.hora} - {notif.app}: {notif.mensaje}")
            aux.append(notif)
        
        for n in aux:
            self.arrive(n)

    #B
    def Twitter_Python(self):
        aux = []            
        seleccionadas = []  

        while self.size() > 0:
            notif = self.attention()
            if notif.app == "Twitter" and "Python" in notif.mensaje:
                print(f"{notif.hora} - {notif.app}: {notif.mensaje}")
            aux.append(notif) 

        for notif in aux:
            self.arrive(notif)

    #C
    def notificaciones_hora(self):
        aux = []
        seleccionadas = []

        while self.size() > 0:
            notif = self.attention()
            if "11:43" <= notif.hora <= "15:57":
                print(f"{notif.hora} - {notif.app}: {notif.mensaje}")
            aux.append(notif)
        for notif in aux:
            self.arrive(notif)
                
class Notificaciones():
    def __init__(self, hora, app, mensaje):
        self.hora = hora
        self.app = app
        self.mensaje = mensaje

colaNotificaciones = Queue()

#Cargar pj
for dato in notificaciones_data:
    colaNotificaciones.arrive(Notificaciones(dato["hora"], dato["app"], dato["mensaje"]))

print("Notificaciones de Facebook eliminadas :")
colaNotificaciones.facebook_Delete()

print("Notificaciones de twiter sobre Python:")
colaNotificaciones.Twitter_Python()

print("Notificaciones entre 11:43 y 15:57")
colaNotificaciones.notificaciones_hora()
