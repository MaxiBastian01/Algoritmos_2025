# Ejercicio 2: Dada una lista de personajes de marvel (la desarrollada en clases) debe tener 100 o mas, resolver:
#A Listado ordenado de manera ascendente por nombre de los personajes.
#B Determinar en que posicion esta The Thing y Rocket Raccoon.
#C Listar todos los villanos de la lista.
#D Poner todos los villanos en una cola para determinar luego cuales aparecieron antes de 1980.
#E Listar los superheores que comienzan con  Bl, G, My, y W.
#F Listado de personajes ordenado por nombre real de manera ascendente de los personajes.
#G Listado de superheroes ordenados por fecha de aparación.
#H Modificar el nombre real de Ant Man a Scott Lang.
#I Mostrar los personajes que en su biografia incluyan la palabra time-traveling o suit.
#J Eliminar a Electro y Baron Zemo de la lista y mostrar su información si estaba en la lista.


from super_heroes_data import superheroes
#Use la lista de su github


class superheroe():
    def __init__(self, name, alias, real_name, short_bio, first_appearance, is_villain):
        self.name = name
        self.alias = alias
        self.real_name = real_name
        self.short_bio = short_bio
        self.first_appearance = first_appearance
        self.is_villain = is_villain

    def __str__(self):
        return f"Name: {self.name}, Alias: {self.alias}, Real Name: {self.real_name}, Short Bio: {self.short_bio}, First Appearance: {self.first_appearance}, Is Villain: {self.is_villain}"
    

class superheroe_list(list):
    #A
    def sort_ascendente(self):
        self.sort(key=lambda heroe: heroe.name)

    def show (self):
        for heroe in self:
            print(heroe)
    #B
    def posicion_heroe(self, heroe_name):
        i = 0  
        for heroe in self:
            if heroe.name == heroe_name:
                return i
            i += 1  
        return -1  
    
    #C
    def villanos(self):
        villanos_lista = []                
        for superhero in self:             
            if superhero.is_villain == True:  
                villanos_lista.append(superhero)  
        return villanos_lista  

    #F
    def sort_por_real_name(self):
        self.sort(key=lambda heroe: heroe.real_name if heroe.real_name is not None else "")  
    
    #G
    def sort_por_fecha_aparicion(self):
        self.sort(key=lambda heroe: heroe.first_appearance if heroe.first_appearance is not None else 9999)
        #Profe ust dijo que convierta a str los que decian None, pero yo lo hice con un numero muy grande para que no se ordene antes de los que tienen fecha, no se si esta bien o mal, pero funciona

    def search(self, heroe_name):
        self.sort_ascendente()
        start = 0 
        end = len(self) - 1
        while start <= end:
            middle = (start + end) // 2

            if self[middle].name == heroe_name:
                return self[middle]  
            
            elif self[middle].name < heroe_name:
                start = middle + 1
            else:
                end = middle - 1

        return None
    #j 
    def delete_hero(self, hero_name):
        heroe = self.search(hero_name)
        if heroe:
            index = self.index(heroe)  
            self.pop(index)            
            print(f"Heroe '{hero_name}' eliminado.")
        else:
            print(f"Heroe '{hero_name}' no encontrado.")

    

lista_heroes = superheroe_list()

for hero in superheroes:
    new_hero = superheroe(
        name=hero['name'],
        alias=hero['alias'],
        real_name=hero['real_name'],
        short_bio=hero['short_bio'],
        first_appearance=hero['first_appearance'],
        is_villain=hero['is_villain']
    )
    lista_heroes.append(new_hero)

#A
lista_heroes.sort_ascendente()

#B
posicion1 = lista_heroes.posicion_heroe("The Thing")
posicion2 = lista_heroes.posicion_heroe("Rocket Raccoon")
print(f"The Thing esta en la posicion: {posicion1}")
print(f"Rocket Raccoon esta en la posicion: {posicion2}")

#C
villanos_lista = lista_heroes.villanos()
for villano in villanos_lista:
    print(villano)

#D
for n in villanos_lista:
    if n.first_appearance < 1980:
        print(f"Villano: {n.name}, Primera aparicion: {n.first_appearance}")

#E
letras = ['Bl', 'G', 'My', 'W']
print("Superheroes que comienzan con 'Bl', 'G', 'My', 'W'")
for heroe in lista_heroes:
    if heroe.name[0].upper() in letras: 
        print(f"- {heroe.name}")

#F
lista_heroes.sort_por_real_name()

#G
lista_heroes.sort_por_fecha_aparicion()

#H
AntMan = lista_heroes.search("Ant Man")
if AntMan:
    AntMan.real_name = "Scott Lang"
    print(f"El nombre real de 'Ant Man' fue modificado a: {AntMan.real_name}")
else:
    print("Ant Man no fue encontrado en la lista.")

#I
print("Personajes con 'time-traveling' o 'suit' en su biografía:")
for heroe in lista_heroes:
    bio = heroe.short_bio.lower()  
    if "time-traveling" in bio or "suit" in bio:
        print(f"- {heroe.name}")

#J
lista_heroes.delete_hero("Electro")
lista_heroes.delete_hero("Baron Zemo")






