superheroes = [
    {
        "name": "Kang",
        "alias": "Kang the Conqueror",
        "real_name": "Nathaniel Richards",
        "short_bio": "Kang the Conqueror is a time-traveling warlord who has battled many heroes, especially the Avengers. He is known for his mastery of advanced technology and his ability to manipulate time.",
        "first_appearance": 1964,
        "is_villain": True
    },
    {
        "name": "Hulk",
        "alias": "The Hulk",
        "real_name": "Bruce Banner",
        "short_bio": "Hulk is a gamma-powered superhero with incredible strength and durability. He transforms into a green giant when angered or stressed.",
        "first_appearance": 1962,
        "is_villain": False
    },
    {
        "name": "Black Widow",
        "alias": "Natasha Romanoff",
        "real_name": "Natasha Romanoff",
        "short_bio": "Black Widow is a highly trained spy and former assassin with exceptional skills in hand-to-hand combat and espionage.",
        "first_appearance": 1964,
        "is_villain": False
    },
    {
        "name": "Black Cat",
        "alias": "Felicia Hardy",
        "real_name": "Felicia Hardy",
        "short_bio": "Black Cat is a skilled burglar with a unique power that brings bad luck to her enemies. She often operates in the gray area between hero and villain.",
        "first_appearance": 1979,
        "is_villain": True
 }]


class HeroList(list):
    def __init__(self):
        super().__init__()
        self.CRITERION_FUNCTIONS = {}


    def add_criterion(self, key_criterion, function):
        self.CRITERION_FUNCTIONS[key_criterion] = function

    def show(self):
        for element in self:
            print(element)

    def delete_value(self, value, key_value = None):
        index = self.search(value, key_value)
        return self.pop(index) if index is not None else index


    def sort_by_criterion(self, criterion_key = None):
        criterion = self.CRITERION_FUNCTIONS.get(criterion_key)

        if criterion is not None:
            self.sort(key=criterion)
        elif self and isinstance(self[0], (int, str, bool)):
            self.sort()
        else:
            print('criterio de orden no encontrado')

    def show(self):
        for element in self:
            print(element)

        def search(self, search_value, search_key = None):
            self.sort_by_criterion(search_key)
            start = 0
            end = len(self) - 1
            middle = (start + end) // 2

            while start <= end:
                criterion = self.CRITERION_FUNCTIONS.get(search_key)
                if criterion is None and self and not isinstance(self[0], (int, str, bool)):
                    return None

                value = criterion(self[middle]) if criterion else self[middle]
                if value == search_value:
                    return middle
                elif value < search_value:
                    start = middle + 1
                else:
                    end = middle - 1

                middle = (start + end) // 2
            
            return None  
        
        def insert_value(self, value, position=0):
            if 0 <= position <= len(self):
                self.insert(position, value)
            else:
                print("Posición inválida")


